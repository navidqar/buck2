"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1502],{23693:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"concepts/build_rule","title":"Build Rule","description":"A build rule is a procedure for producing output files from a set of input","source":"@site/../docs/concepts/build_rule.md","sourceDirName":"concepts","slug":"/concepts/build_rule","permalink":"/docs/concepts/build_rule","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"build_rule","title":"Build Rule"},"sidebar":"main","previous":{"title":"Concept Map","permalink":"/docs/concepts/concept_map"},"next":{"title":"Build File","permalink":"/docs/concepts/build_file"}}');var r=n(74848),l=n(28453);const t={id:"build_rule",title:"Build Rule"},a="Build Rule",d={},c=[{value:"Buck2&#39;s collection of build rules",id:"buck2s-collection-of-build-rules",level:2},{value:"Source files as inputs to build rules",id:"source-files-as-inputs-to-build-rules",level:2},{value:"Package boundaries and access to source files",id:"package-boundaries-and-access-to-source-files",level:3},{value:"Symlinks: Use with caution if at all",id:"symlinks-use-with-caution-if-at-all",level:5},{value:"Dependencies: Output from one rule as input to another rule",id:"dependencies-output-from-one-rule-as-input-to-another-rule",level:2},{value:"Required dependencies are always built first",id:"required-dependencies-are-always-built-first",level:3},{value:"Visibility",id:"visibility",level:3},{value:"Dependencies define a graph",id:"dependencies-define-a-graph",level:3},{value:"How to handle special cases: genrules and macros",id:"how-to-handle-special-cases-genrules-and-macros",level:2},{value:"Multiple output files with genrules",id:"multiple-output-files-with-genrules",level:3},{value:"Macros",id:"macros",level:3},{value:"String parameter macros",id:"string-parameter-macros",level:2}];function o(e){const i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h5:"h5",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"build-rule",children:"Build Rule"})}),"\n",(0,r.jsxs)(i.p,{children:["A ",(0,r.jsx)(i.em,{children:"build rule"})," is a procedure for producing output files from a set of input\nfiles in the context of a specified build configuration. Build rules are\nspecified in ",(0,r.jsx)(i.a,{href:"/docs/concepts/build_file",children:"build file"}),"s\u2014typically named BUCK. ",(0,r.jsx)(i.strong,{children:"Note:"})," A\nbuild rule must explicitly specify, in its arguments, all of its required inputs\nin order for Buck2 to be able to build the rule's output in a way that is\ndeterministic and reproducible."]}),"\n",(0,r.jsx)(i.h2,{id:"buck2s-collection-of-build-rules",children:"Buck2's collection of build rules"}),"\n",(0,r.jsxs)(i.p,{children:["Buck2 comes with a collection of built-in build rules for many common build\nprocedures. For example, compiling Java code against the Android SDK is a common\nprocedure, so Buck2 provides the build rule\n",(0,r.jsx)(i.a,{href:"../../prelude/globals#android_library",children:(0,r.jsx)(i.code,{children:"android_library"})})," to do that.\nSimilarly, the final product of most Android development is an APK, so you can\nuse the build rule ",(0,r.jsx)(i.a,{href:"../../prelude/globals#android_binary",children:(0,r.jsx)(i.code,{children:"android_binary"})})," to\ncreate an APK."]}),"\n",(0,r.jsx)(i.h2,{id:"source-files-as-inputs-to-build-rules",children:"Source files as inputs to build rules"}),"\n",(0,r.jsxs)(i.p,{children:["Most build rules specify source files as inputs. For example, a\n",(0,r.jsx)(i.a,{href:"../../prelude/globals#cxx_library",children:(0,r.jsx)(i.code,{children:"cxx_library"})})," rule would specify ",(0,r.jsx)(i.code,{children:".cpp"}),"\nfiles as inputs. To support specifying these files, a ",(0,r.jsx)(i.code,{children:"cxx_library"})," rule\nprovides the ",(0,r.jsx)(i.code,{children:"srcs"})," argument. Some languages, such as C++, use header files as\nwell. To specify these, ",(0,r.jsx)(i.code,{children:"cxx_library"})," provides a ",(0,r.jsx)(i.code,{children:"headers"})," argument. In addition\nto ",(0,r.jsx)(i.code,{children:"srcs"})," and ",(0,r.jsx)(i.code,{children:"headers"}),", some rules provide variants of these arguments, such as\n",(0,r.jsx)(i.code,{children:"platform_srcs"})," and ",(0,r.jsx)(i.code,{children:"platform_headers"}),". These arguments support groups of source\nfiles that should be used as inputs only when building for specific platforms."]}),"\n",(0,r.jsx)(i.h3,{id:"package-boundaries-and-access-to-source-files",children:"Package boundaries and access to source files"}),"\n",(0,r.jsxs)(i.p,{children:["In Buck2, a BUCK file defines a ",(0,r.jsx)(i.em,{children:"package"}),", which corresponds ",(0,r.jsx)(i.em,{children:"roughly"})," to the\ndirectory that contains the BUCK file and those subdirectories that do not\nthemselves contain BUCK files. (To learn more, see the\n",(0,r.jsx)(i.a,{href:"/docs/concepts/key_concepts",children:"Key Concepts"})," topic.) A rule in a BUCK file cannot specify a\nsource file as an input unless that source file is in that BUCK file's package.\nAn exception to this restriction exists for header files, but only if a rule in\nthe package that contains the header file ",(0,r.jsx)(i.em,{children:"exports"})," that header file using the\n",(0,r.jsx)(i.code,{children:"exported_headers"})," argument. For more details, see the description for\n",(0,r.jsx)(i.code,{children:"exported_headers"})," in, for example, the\n",(0,r.jsx)(i.a,{href:"../../prelude/globals#cxx_library",children:(0,r.jsx)(i.code,{children:"cxx_library"})})," topic. More commonly though,\nthe package for a BUCK file contains all the source files required for the rules\ndefined in that BUCK file. Functionality in source files from other packages is\nmade available through the artifacts produced by the rules in the BUCK files for\nthose packages. For example, a ",(0,r.jsx)(i.a,{href:"../../prelude/globals/#cxx_binary",children:(0,r.jsx)(i.code,{children:"cxx_binary"})}),"\nmight use the functionality in a ",(0,r.jsx)(i.code,{children:"cxx_library"})," that is defined in another\npackage. To access that functionality, the ",(0,r.jsx)(i.code,{children:"cxx_binary"})," would take that\n",(0,r.jsx)(i.code,{children:"cxx_library"})," as a ",(0,r.jsx)(i.em,{children:"dependency"}),"."]}),"\n",(0,r.jsx)(i.h5,{id:"symlinks-use-with-caution-if-at-all",children:"Symlinks: Use with caution if at all"}),"\n",(0,r.jsxs)(i.p,{children:["We recommend that you do ",(0,r.jsx)(i.em,{children:"not"})," use symlinks\u2014either absolute or relative\u2014to\nspecify input files to build rules. Although using symlinks in this context does\nsometimes work, it can lead to unexpected behavior and errors."]}),"\n",(0,r.jsx)(i.h2,{id:"dependencies-output-from-one-rule-as-input-to-another-rule",children:"Dependencies: Output from one rule as input to another rule"}),"\n",(0,r.jsxs)(i.p,{children:["A build rule can use the output from another build rule as one of its inputs by\nspecifying that rule as a ",(0,r.jsx)(i.em,{children:"dependency"}),". Typically, a build rule specifies its\ndependencies as a list of ",(0,r.jsx)(i.a,{href:"/docs/concepts/build_target",children:"build target"}),"s in its ",(0,r.jsx)(i.code,{children:"deps"}),"\nargument. However, the rule can also specify dependencies\u2014as build targets\u2014in\nother arguments, such as ",(0,r.jsx)(i.code,{children:"srcs"}),". ",(0,r.jsx)(i.strong,{children:"Example:"})," The output of a\n",(0,r.jsx)(i.a,{href:"../../prelude/globals/#java_library",children:(0,r.jsx)(i.code,{children:"java_library"})})," rule is a JAR file. If a\n",(0,r.jsx)(i.code,{children:"java_library"})," rule specifies another ",(0,r.jsx)(i.code,{children:"java_library"})," rule as a dependency, the\nJAR file produced by the specified rule is added to the classpath for the\n",(0,r.jsx)(i.code,{children:"java_library"})," that depends on it. ",(0,r.jsx)(i.strong,{children:"Example:"})," If a\n",(0,r.jsx)(i.a,{href:"../../prelude/globals/#java_binary",children:(0,r.jsx)(i.code,{children:"java_binary"})})," rule specifies a\n",(0,r.jsx)(i.code,{children:"java_library"})," rule as a dependency, the JAR file for the specified\n",(0,r.jsx)(i.code,{children:"java_library"})," is available on the classpath for the ",(0,r.jsx)(i.code,{children:"java_binary"}),". In addition,\nin the case of ",(0,r.jsx)(i.code,{children:"java_binary"}),", the JAR files for any dependencies of the\n",(0,r.jsx)(i.code,{children:"java_library"})," rule ",(0,r.jsx)(i.em,{children:"are also"})," made available to the ",(0,r.jsx)(i.code,{children:"java_binary"})," rule\u2014and if\nthose dependencies have dependencies of their own, they are added as well. This\nexhaustive cascade of dependencies is referred to as the rule's ",(0,r.jsx)(i.em,{children:"transitive\nclosure"}),"."]}),"\n",(0,r.jsx)(i.h3,{id:"required-dependencies-are-always-built-first",children:"Required dependencies are always built first"}),"\n",(0,r.jsxs)(i.p,{children:["Buck2 guarantees that any dependencies that a rule lists that are required in\norder to build that rule are built successfully ",(0,r.jsx)(i.em,{children:"before"})," Buck2 builds the rule\nitself. Note though that there can be special cases\u2014such as\n",(0,r.jsx)(i.a,{href:"../../prelude/globals/#apple_bundle",children:(0,r.jsx)(i.code,{children:"apple_bundle"})}),"\u2014where a rule's listed\ndependencies do not actually need to be built before the rule."]}),"\n",(0,r.jsx)(i.h3,{id:"visibility",children:"Visibility"}),"\n",(0,r.jsxs)(i.p,{children:["In order for a build rule to take a dependency on another build rule, the build\nrule on which the dependency is taken must be ",(0,r.jsx)(i.em,{children:"visible"})," to the build rule taking\nthe dependency. A build rule's ",(0,r.jsx)(i.code,{children:"visibility"})," argument is a list of\n",(0,r.jsx)(i.a,{href:"/docs/concepts/target_pattern",children:"build target pattern"}),"s that specify the rules that can take\nthat rule as a dependency. For more information about the concept of visibility\nin Buck2, see the ",(0,r.jsx)(i.a,{href:"/docs/concepts/visibility",children:"Visibility"})," topic."]}),"\n",(0,r.jsx)(i.h3,{id:"dependencies-define-a-graph",children:"Dependencies define a graph"}),"\n",(0,r.jsx)(i.p,{children:"Build rules and their dependencies define a directed acyclic graph (DAG). Buck2\nrequires this graph to be acyclic to make it possible to build independent\nsubgraphs in parallel."}),"\n",(0,r.jsx)(i.h2,{id:"how-to-handle-special-cases-genrules-and-macros",children:"How to handle special cases: genrules and macros"}),"\n",(0,r.jsxs)(i.p,{children:['Although Buck2 provides a rich set of built-in build rules for developers, it is\nnot able to address all possible needs. As an "escape hatch," Buck2 provides a\ncategory of generic build rules called ',(0,r.jsx)(i.em,{children:"genrules"}),". With genrules, you can\nperform arbitrary operations using shell scripts. The genrules supported by\nBuck2 are:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"../../prelude/globals/#genrule",children:(0,r.jsx)(i.code,{children:"genrule"})})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"../../prelude/globals/#apk_genrule",children:(0,r.jsx)(i.code,{children:"apk_genrule"})})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"../../prelude/globals/#cxx_genrule",children:(0,r.jsx)(i.code,{children:"cxx_genrule"})})}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"multiple-output-files-with-genrules",children:"Multiple output files with genrules"}),"\n",(0,r.jsxs)(i.p,{children:["In most cases, a build rule produces exactly one output file. However, with\ngenrules, you can specify an output ",(0,r.jsx)(i.em,{children:"directory"})," and write arbitrary files to\nthat directory."]}),"\n",(0,r.jsx)(i.h3,{id:"macros",children:"Macros"}),"\n",(0,r.jsx)(i.p,{children:"Finally, note that you can define functions that generate build rules. In\ngeneral, this should not be something that you need to do, but taking advantage\nof this option might help you add needed functionality to Buck2's without\nediting its source code."}),"\n",(0,r.jsx)(i.h2,{id:"string-parameter-macros",children:"String parameter macros"}),"\n",(0,r.jsxs)(i.p,{children:["It is also possible to expand references to other rules within the ",(0,r.jsx)(i.code,{children:"cmd"}),", using\nthe builtin ",(0,r.jsx)(i.a,{href:"/docs/concepts/string_parameter_macros",children:(0,r.jsx)(i.code,{children:"string parameter macros"})}),". All build\nrules expanded in the command are automatically considered to be dependencies of\nthe ",(0,r.jsx)(i.code,{children:"genrule()"}),"."]})]})}function u(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>a});var s=n(96540);const r={},l=s.createContext(r);function t(e){const i=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:i},e.children)}}}]);