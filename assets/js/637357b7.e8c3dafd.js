"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3129],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(96540);const o={},a=s.createContext(o);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},76940:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"users/commands/kill","title":"kill","description":"These are the flags/commands under buck2 kill and their --help output:","source":"@site/../docs/users/commands/kill.generated.md","sourceDirName":"users/commands","slug":"/users/commands/kill","permalink":"/docs/users/commands/kill","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"kill","title":"kill"},"sidebar":"main","previous":{"title":"install","permalink":"/docs/users/commands/install"},"next":{"title":"killall","permalink":"/docs/users/commands/killall"}}');var o=t(74848),a=t(28453);const i={id:"kill",title:"kill"},l=void 0,r={},c=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["These are the flags/commands under ",(0,o.jsx)(n.code,{children:"buck2 kill"})," and their ",(0,o.jsx)(n.code,{children:"--help"})," output:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"Kill the buck daemon.\n\nNote there's also `buck2 killall` and `buck2 clean`.\n\n`buck2 killall` kills all the buck2 processes on the machine.\n\n`buck2 clean` kills the buck2 daemon and also deletes the buck2 state files.\n\nUsage: buck2-release kill [OPTIONS]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nEvent Log Options:\n  --event-log <PATH>\n          Write events to this log file\n\n  --write-build-id <PATH>\n          Write command invocation id into this file\n\n  --unstable-write-invocation-record <PATH>\n          Write the invocation record (as JSON) to this path. No guarantees whatsoever are made\n          regarding the stability of the format\n\n  --command-report-path <PATH>\n          Write the command report to this path. A command report is always written to\n          `buck-out/v2/<uuid>/command_report` even without this flag\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);