"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3212],{3631:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"users/commands/completion","title":"completion","description":"These are the flags/commands under buck2 completion and their --help output:","source":"@site/../docs/users/commands/completion.generated.md","sourceDirName":"users/commands","slug":"/users/commands/completion","permalink":"/docs/users/commands/completion","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"completion","title":"completion"},"sidebar":"main","previous":{"title":"clean","permalink":"/docs/users/commands/clean"},"next":{"title":"cquery","permalink":"/docs/users/commands/cquery"}}');var s=t(74848),c=t(28453);const r={id:"completion",title:"completion"},i=void 0,a={},l=[];function u(e){const n={code:"code",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["These are the flags/commands under ",(0,s.jsx)(n.code,{children:"buck2 completion"})," and their ",(0,s.jsx)(n.code,{children:"--help"})," output:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Print completion configuration for shell\n\nFor a one-time setup, run one of the following commands:\n    source <(buck2 completion bash)\n    source <(buck2 completion zsh)\n\nUsage: buck2-release completion [OPTIONS] <SHELL>\n\nArguments:\n  <SHELL>\n          shell for which to generate completion script\n          \n          [possible values: bash, fish, zsh]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n"})})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var o=t(96540);const s={},c=o.createContext(s);function r(e){const n=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);