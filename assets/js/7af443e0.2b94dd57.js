"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7321],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var t=s(96540);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}},58922:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"users/commands/server","title":"server","description":"These are the flags/commands under buck2 server and their --help output:","source":"@site/../docs/users/commands/server.generated.md","sourceDirName":"users/commands","slug":"/users/commands/server","permalink":"/docs/users/commands/server","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"server","title":"server"},"sidebar":"main","previous":{"title":"run","permalink":"/docs/users/commands/run"},"next":{"title":"starlark","permalink":"/docs/users/commands/starlark"}}');var r=s(74848),o=s(28453);const a={id:"server",title:"server"},i=void 0,c={},l=[];function u(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["These are the flags/commands under ",(0,r.jsx)(n.code,{children:"buck2 server"})," and their ",(0,r.jsx)(n.code,{children:"--help"})," output:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Start, query, and control the buck2 server, a long-lived process, spanning buck2 command line\ninvocations.\nUsing this command can ensure the daemon is running.\n\nTo stop a specific server, use `buck2 kill` and add `--isolation-dir` for a specific instance.\nTo stop all instances, use `buck2 killall`.\n\nUsage: buck2-release server [OPTIONS]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);