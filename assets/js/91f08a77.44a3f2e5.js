"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1276],{28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>l});var n=r(96540);const s={},a=n.createContext(s);function o(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(a.Provider,{value:t},e.children)}},73166:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>x,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"api/bxl/LazyCqueryContext","title":"LazyCqueryContext","description":"LazyCqueryContext.eval","source":"@site/../docs/api/bxl/LazyCqueryContext.md","sourceDirName":"api/bxl","slug":"/api/bxl/LazyCqueryContext","permalink":"/docs/api/bxl/LazyCqueryContext","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"LazyContext","permalink":"/docs/api/bxl/LazyContext"},"next":{"title":"LazyResolvedAttrs","permalink":"/docs/api/bxl/LazyResolvedAttrs"}}');var s=r(74848),a=r(28453),o=r(56289);const l={},c="LazyCqueryContext",i={},d=[{value:"LazyCqueryContext.eval",id:"lazycquerycontexteval",level:2}];function u(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"lazycquerycontext",children:"LazyCqueryContext"})}),"\n",(0,s.jsx)(t.h2,{id:"lazycquerycontexteval",children:"LazyCqueryContext.eval"}),"\n",(0,s.jsx)("pre",{class:"language-python",children:(0,s.jsxs)("code",{children:["def LazyCqueryContext.eval(\nquery: ",(0,s.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),",\n/,\n*,\nquery_args: None | ",(0,s.jsx)(o.default,{to:"/docs/api/bxl/UnconfiguredTargetSet",children:"target_set"})," | list[",(0,s.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),"] = None,\ntarget_universe: None | list[",(0,s.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),"] | tuple[",(0,s.jsx)(o.default,{to:"/docs/api/starlark/str",children:"str"}),", ...] = None,\n) -> ",(0,s.jsx)(o.default,{to:"/docs/api/bxl/Lazy",children:"bxl.Lazy"})]})}),"\n",(0,s.jsxs)(t.p,{children:["Evaluates some general query string. ",(0,s.jsx)(t.code,{children:"query_args"})," can be a target_set of unconfigured nodes, or a list of strings. Returns a ",(0,s.jsx)(t.code,{children:"dict"})," of target labels mapped to their ",(0,s.jsx)(t.code,{children:"target_set"})," results if ",(0,s.jsx)(t.code,{children:"query_args"})," was passed in, otherwise returns a single ",(0,s.jsx)(t.code,{children:"target_set"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Sample usage:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'def _impl_eval(ctx):\n    result1 = ctx.lazy.cquery().eval("inputs(root//bin:the_binary)").resolve()\n    ctx.output.print(result1)\n\n    result2 = ctx.lazy.cquery().eval("inputs(%s)", query_args = ["cell//path/to/file:target"]).resolve()\n    ctx.output.print(result2)\n'})})]})}function x(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);