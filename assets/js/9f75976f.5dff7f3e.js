"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2570],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(96540);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},55667:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"users/commands/root","title":"root","description":"These are the flags/commands under buck2 root and their --help output:","source":"@site/../docs/users/commands/root.generated.md","sourceDirName":"users/commands","slug":"/users/commands/root","permalink":"/docs/users/commands/root","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"root","title":"root"},"sidebar":"main","previous":{"title":"query","permalink":"/docs/users/commands/query"},"next":{"title":"run","permalink":"/docs/users/commands/run"}}');var r=t(74848),s=t(28453);const a={id:"root",title:"root"},i=void 0,c={},d=[];function u(e){const n={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["These are the flags/commands under ",(0,r.jsx)(n.code,{children:"buck2 root"})," and their ",(0,r.jsx)(n.code,{children:"--help"})," output:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Find buck cell, project or package root\n\nUsage: buck2-release root [OPTIONS]\n\nOptions:\n  -k, --kind <KIND>\n          which root to print\n          \n          [default: cell]\n          [possible values: cell, project, daemon]\n\n      --dir <PATH>\n          determine the root for a specific directory (if not provided, finds the root for the\n          current directory)\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nUniversal Options:\n  -v, --verbose <VERBOSITY>\n          How verbose buck should be while logging.\n          \n          Values: 0 = Quiet, errors only; 1 = Show status. Default; 2 = more info about errors; 3 =\n          more info about everything; 4 = more info about everything + stderr;\n          \n          It can be combined with specific log items (stderr, full_failed_command, commands,\n          actions, status, stats, success) to fine-tune the verbosity of the log. Example usage\n          \"-v=1,stderr\"\n          \n          [default: 1]\n\n      --oncall <ONCALL>\n          The oncall executing this command\n\n      --client-metadata <CLIENT_METADATA>\n          Metadata key-value pairs to inject into Buck2's logging. Client metadata must be of the\n          form `key=value`, where `key` is a snake_case identifier, and will be sent to backend\n          datasets\n\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);