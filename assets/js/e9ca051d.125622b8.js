"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3323],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>s});var c=i(96540);const t={},a=c.createContext(t);function o(e){const n=c.useContext(a);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),c.createElement(a.Provider,{value:n},e.children)}},63749:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>r});const c=JSON.parse('{"id":"concepts/build_file","title":"Build File","description":"A build file is a file, typically named BUCK, that defines one or more","source":"@site/../docs/concepts/build_file.md","sourceDirName":"concepts","slug":"/concepts/build_file","permalink":"/docs/concepts/build_file","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"build_file","title":"Build File"},"sidebar":"main","previous":{"title":"Build Rule","permalink":"/docs/concepts/build_rule"},"next":{"title":"Build Target","permalink":"/docs/concepts/build_target"}}');var t=i(74848),a=i(28453);const o={id:"build_file",title:"Build File"},s="Build File",l={},r=[{value:"Syntax and structure overview",id:"syntax-and-structure-overview",level:2},{value:"Mini BUCK example",id:"mini-buck-example",level:3},{value:"Targets",id:"targets",level:3},{value:"Build file naming and referencing",id:"build-file-naming-and-referencing",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"build-file",children:"Build File"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.em,{children:"build file"})," is a file, typically named ",(0,t.jsx)(n.code,{children:"BUCK"}),", that defines one or more\n",(0,t.jsx)(n.a,{href:"/docs/concepts/build_rule",children:"build rule"}),"s. Buck2 takes a ",(0,t.jsx)(n.code,{children:"BUCK"})," file as input and evaluates\nthe file to declare ",(0,t.jsx)(n.a,{href:"/docs/concepts/build_target",children:"target"}),"s, which are then used to create a\ngraph of dependencies and to derive the actions that must be completed to build\nintermediate and final software outputs."]}),"\n",(0,t.jsx)(n.h2,{id:"syntax-and-structure-overview",children:"Syntax and structure overview"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Build files are syntactically Starlark files, containing a set of\n",(0,t.jsx)(n.a,{href:"/docs/concepts/build_target",children:"target"})," definitions (i.e. invocations of functions where the\nname of the function is the type of the target, and the arguments to the\nfunction are the attributes of the target)."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Each build file can contain multiple target definitions and is uniquely\nidentified by the directory it is in."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Relative order of these target definitions is not important; all that matters\nis which target definitions were declared, and with what values, by the time\nevaluation of the build file completes."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In order to enforce a clean separation between code and data, build files\ncannot contain arbitrary function definitions or conditional/for statements.\nMoreover, ",(0,t.jsx)(n.code,{children:"*args"})," and ",(0,t.jsx)(n.code,{children:"**kwargs"})," arguments are not permitted; instead, all the\narguments must be listed explicitly. Instead, functions can be declared in\n",(0,t.jsx)(n.code,{children:".bzl"})," files that must be loaded explicitly at the top of the build file."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"mini-buck-example",children:"Mini BUCK example"}),"\n",(0,t.jsxs)(n.p,{children:["Here is a mini example of a build file containing two targets, one refers to a\nfile ",(0,t.jsx)(n.code,{children:"main.c"})," as its inputs and the other two files ",(0,t.jsx)(n.code,{children:"greeting.c"})," and\n",(0,t.jsx)(n.code,{children:"greeting.h"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"cxx_binary(\n    name = 'hello',\n    srcs = [\n        'main.c',\n    ],\n    deps = [\n        ':greeting',\n    ],\n)\n\ncxx_library(\n    name = 'greeting',\n    srcs = [\n        'greeting.c',\n    ],\n    exported_headers = [\n        'greeting.h',\n    ],\n)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"targets",children:"Targets"}),"\n",(0,t.jsxs)(n.p,{children:["Each ",(0,t.jsx)(n.a,{href:"/docs/concepts/build_target",children:"target"})," has a name, identifying it uniquely in the same\nbuild file. Additionally, it has a set of named attributes depending on the type\nof the target. Attribute names can only have alphanumeric characters and\nunderscores, and cannot start with a digit."]}),"\n",(0,t.jsx)(n.h2,{id:"build-file-naming-and-referencing",children:"Build file naming and referencing"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["You can change the name that Buck2 uses for the build file in the ",(0,t.jsx)(n.code,{children:"buildfile"}),"\nsection of ",(0,t.jsx)(n.a,{href:"/docs/concepts/glossary#buckconfig",children:"buckconfig"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:['A source file in your project can only be referenced by rules in its "nearest"\nbuild file, where "nearest" means its closest direct ancestor in your\nproject\'s file tree. (If a source file has a build file as a sibling, then\nthat is its nearest ancestor.) For example, if your project had the following\n',(0,t.jsx)(n.code,{children:"BUCK"})," files:"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"java/com/facebook/base/BUCK\njava/com/facebook/common/BUCK\njava/com/facebook/common/collect/BUCK\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then your build rules would have the following constraints:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Rules in ",(0,t.jsx)(n.code,{children:"java/com/facebook/base/BUCK"})," can reference any file under\n",(0,t.jsx)(n.code,{children:"java/com/facebook/base/"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Rules in ",(0,t.jsx)(n.code,{children:"java/com/facebook/common/"})," can reference any files under that\ndirectory, except for those under ",(0,t.jsx)(n.code,{children:"java/com/facebook/common/collect/"}),', as\nthose "belong" to the ',(0,t.jsx)(n.code,{children:"BUCK"})," file in the ",(0,t.jsx)(n.code,{children:"collect"})," directory."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The set of source files accessible to a build file is also known as its ",(0,t.jsx)(n.em,{children:"build\npackage"}),". The way to refer to code across build packages is to create build\nrules and use ",(0,t.jsx)(n.code,{children:"deps"})," to refer to that code. Going back to the previous example,\nsuppose code in ",(0,t.jsx)(n.code,{children:"java/com/facebook/common/concurrent/"})," wants to depend on code\nin ",(0,t.jsx)(n.code,{children:"java/com/facebook/common/collect/"}),". Presumably\n",(0,t.jsx)(n.code,{children:"java/com/facebook/common/collect/BUCK"})," has a build rule like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"java_library(\n  name = 'collect',\n  srcs = glob(['*.java']),\n  deps = ['//java/com/facebook/base:base',],)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then ",(0,t.jsx)(n.code,{children:"java/com/facebook/common/BUCK"})," could have a rule like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"java_library(\n  name = 'concurrent',\n  srcs = glob(['concurrent/*.java']),\n  deps = ['//java/com/facebook/base:base','//java/com/facebook/common/collect:collect',],)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["whereas the following ",(0,t.jsx)(n.strong,{children:"would be invalid"})," because\n",(0,t.jsx)(n.code,{children:"java/com/facebook/common/collect/"})," has its own build file, so\n",(0,t.jsx)(n.code,{children:"//java/com/facebook/common/collect:concurrent"})," cannot list\n",(0,t.jsx)(n.code,{children:"java/com/facebook/common/collect/*.java"})," in its ",(0,t.jsx)(n.code,{children:"srcs"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"java_library(\n  name = 'concurrent',\n  srcs = glob(['collect/*.java', 'concurrent/*.java']),\n  deps = ['//java/com/facebook/base:base',],)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);